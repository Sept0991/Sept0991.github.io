{"meta":{"title":"Soaring","subtitle":"...","description":"","author":"Sept D","url":"https://sept0991.github.io","root":"/"},"pages":[{"title":"categories","date":"2021-12-07T08:41:47.000Z","updated":"2021-12-07T08:43:29.252Z","comments":false,"path":"categories/index.html","permalink":"https://sept0991.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"KaratsubaMutiplication","slug":"KaratsubaMutiplication","date":"2021-12-17T19:43:59.000Z","updated":"2021-12-17T19:51:14.390Z","comments":true,"path":"2021/12/18/KaratsubaMutiplication/","link":"","permalink":"https://sept0991.github.io/2021/12/18/KaratsubaMutiplication/","excerpt":"","text":"Karatsuba MutiplicationKaratsuba mutiplication 是一种优化的乘法算法. 可达到O(log3)的时间复杂度,理论上时间复杂度低于学校教的乘法","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"算法","slug":"算法","permalink":"https://sept0991.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"AlgorithmAnalysisRoadmap","slug":"AlgorithmAnalysisRoadmap","date":"2021-12-08T05:07:11.000Z","updated":"2021-12-08T05:20:07.284Z","comments":true,"path":"2021/12/08/AlgorithmAnalysisRoadmap/","link":"","permalink":"https://sept0991.github.io/2021/12/08/AlgorithmAnalysisRoadmap/","excerpt":"","text":"Weekly targets1. Week 1-2: Integer arithmetic, Master theorem, math proofs on complexity 2. Week 3: Linear time sorting and order statistics 3. Week 4-5: Trees, including AVL trees (heaps if time permits) 4. Week 6: Skip list and hashing 5. Week 7: Graphs BFS DFS 6. Week 8: Shortest path 7. Week 9: Minimum spanning tree 8. Week 10-12: Turing machine, halting problem, complexity class, NP-completeness, exam prep","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"算法","slug":"算法","permalink":"https://sept0991.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"CSTargets","slug":"CSTargets","date":"2021-12-08T04:24:36.000Z","updated":"2021-12-08T04:55:58.144Z","comments":true,"path":"2021/12/08/CSTargets/","link":"","permalink":"https://sept0991.github.io/2021/12/08/CSTargets/","excerpt":"","text":"Targets to complete in 4 weeks1. general questions on combinational logic 2. canonical representations derived from a truth table 3. selecting HDL statements required to implement a combinational logic circuit 4. number maximums for different representations and number of bits 5. number minimums for different representations and number of bits 6. number conversions for different representations and number of bits 7. arithmetic when values represented by different representations and number of bits 8. tracing the behaviour of the ALU for specific settings of zx, nx, zy, ny, f and no 9. ALU status output ng and zr for a specific ALU operation and input values 10. Bitwise operators 11. selecting HDL statements required to implement a sequential logic circuit 12. general questions on data flip flop behaviour 13. general questions on random access memory Targets to complete in 8 weeks1. All of the above 2. wiring of control signals in the HACK CPU 3. general questions about symbols in Hack Assembler 4. contents of the Hack Assembler&#39;s symbol table for short example programs 5. questions about what example Hack Assembler programs do 6. general questions about Virtual Machine commands, segments and memory layout 7. selecting assembler that implements specific Virtual Machine commands 8. selecting Virtual Machine commands to implement expressions 9. selecting Virtual Machine commands to implement assignment statements 10. selecting Virtual Machine commands to implement method and function calls 11. general questions about parsing tokens 12. Typewriters, text files and invisible differences 13. EBNF, languages and parsing Targets to complete in 12 weeks1. All of the above 2. general questions about Jack 3. general questions about syntax analysis and XML 4. the evaluation of Jack expressions 5. compiler tables required by a Jack Compiler 6. code generation by a Jack Compiler 7. Jack Operating System 8. general questions on signal propagation and power consumption 9. general questions on caching Reference Link","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"硬件","slug":"硬件","permalink":"https://sept0991.github.io/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"电路","slug":"电路","permalink":"https://sept0991.github.io/tags/%E7%94%B5%E8%B7%AF/"}]},{"title":"Nand2Tetris","slug":"Nand2Tetris-1","date":"2021-12-07T12:20:41.000Z","updated":"2021-12-08T05:01:26.825Z","comments":true,"path":"2021/12/07/Nand2Tetris-1/","link":"","permalink":"https://sept0991.github.io/2021/12/07/Nand2Tetris-1/","excerpt":"","text":"","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"硬件","slug":"硬件","permalink":"https://sept0991.github.io/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"电路","slug":"电路","permalink":"https://sept0991.github.io/tags/%E7%94%B5%E8%B7%AF/"}]},{"title":"数据结构与算法","slug":"数据结构与算法","date":"2021-12-07T12:19:23.000Z","updated":"2021-12-08T05:11:25.480Z","comments":true,"path":"2021/12/07/数据结构与算法/","link":"","permalink":"https://sept0991.github.io/2021/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"算法","slug":"算法","permalink":"https://sept0991.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"计算机网络","slug":"计算机网络","date":"2021-12-07T12:19:15.000Z","updated":"2021-12-07T12:19:15.849Z","comments":true,"path":"2021/12/07/计算机网络/","link":"","permalink":"https://sept0991.github.io/2021/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"数字电路","slug":"数字电路","date":"2021-12-07T12:16:25.000Z","updated":"2021-12-08T04:56:07.374Z","comments":true,"path":"2021/12/07/数字电路/","link":"","permalink":"https://sept0991.github.io/2021/12/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/","excerpt":"","text":"1.0 逻辑代数定义: 数字电路分析和设计使用的数学工具 在逻辑代数中 有 与(AND) 或(OR) 非(NOT) 3种 基本逻辑运算 主要学的就是真值表 1.1 与运算逻辑关系:只有当决定一事件结果的所有条件同时具备时,结果才能发生 真值表: 逻辑表达式:F=A·B 实现“与”逻辑的单元电路称为 A|B|F “与门” 0 0 0 0 1 0 1 0 0 1 1 1 1.2 或运算逻辑关系:当满足一个条件,结果就能发生 真值表: 逻辑表达式:F=A+B A|B|F 0 0 0 1 0 1 0 1 1 1 1 1 1.3 非运算逻辑关系:逻辑的否定,当条件具备时,结果不会发生,而条件不具备时,结果一定会发生 真值表: 逻辑表达式 F=A‘ A|F 0 1 1 0 波形 (这是一个新概念)注意:1. 输入波形要穷举所有可能的输入组合(n个输入变量有2^n种可能) 2.输出波形与输入变化对应 1.4 基本定律1. 0-1律: A·0=0 A+1=1 2. 自等律: A·1=A A+0=A 3. 重叠律: A·A=A A+A=A 4. 互补律: A·A‘=0 A+A’=1 5. 交换律: A·B=B·A A+B=B+A 6. 结合律: (A·B)·C=A·(B·C) (A+B)+C=A+(B+C) 7. 分配律: A·(B+C)=AB+AC (*此律普通代数运算没有)A+BC=(A+B)(A+C) 8. 反演律(迪摩根定律;De Morgan): (A·B)’=A‘+B’ (A+B)‘=A’·B‘ 9. 还原率:A’‘=A 1.5 三个重要规则1. 代入规则:任何一个逻辑等式,如果将等式两边所出现的某一变量都代之以同一逻辑函数,则等式依然成立,这个规则称为代入规则 2. 反演规则:对于任意一个逻辑函数式F,如果将其代表式中所有的算符“·”换成“+”,“+”换成“·”,常量“0”换成“1”,“1”换成“0”;原变量换成反变量,反变量换成原变量,则所得到的结果就是F‘,F’称为原函数F的反函数,或称为补函数","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"硬件","slug":"硬件","permalink":"https://sept0991.github.io/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"电路","slug":"电路","permalink":"https://sept0991.github.io/tags/%E7%94%B5%E8%B7%AF/"}]},{"title":"My Blog","slug":"My-Blog","date":"2021-12-07T07:26:48.000Z","updated":"2021-12-07T12:10:49.629Z","comments":true,"path":"2021/12/07/My-Blog/","link":"","permalink":"https://sept0991.github.io/2021/12/07/My-Blog/","excerpt":"","text":"The Milestone","categories":[],"tags":[{"name":"闲谈","slug":"闲谈","permalink":"https://sept0991.github.io/tags/%E9%97%B2%E8%B0%88/"}]}],"categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"算法","slug":"算法","permalink":"https://sept0991.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"硬件","slug":"硬件","permalink":"https://sept0991.github.io/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"电路","slug":"电路","permalink":"https://sept0991.github.io/tags/%E7%94%B5%E8%B7%AF/"},{"name":"闲谈","slug":"闲谈","permalink":"https://sept0991.github.io/tags/%E9%97%B2%E8%B0%88/"}]}