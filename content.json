{"meta":{"title":"Soaring","subtitle":"...","description":"","author":"Sept D","url":"https://sept0991.github.io","root":"/"},"pages":[{"title":"categories","date":"2021-12-07T08:41:47.000Z","updated":"2021-12-07T08:43:29.252Z","comments":false,"path":"categories/index.html","permalink":"https://sept0991.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"操作系统（OS）","slug":"OS","date":"2022-06-25T04:05:37.000Z","updated":"2022-06-26T05:20:44.903Z","comments":true,"path":"2022/06/25/OS/","link":"","permalink":"https://sept0991.github.io/2022/06/25/OS/","excerpt":"","text":"初入操作系统操作系统从打开电源开始 打开电源后神秘的黑色背后发生着什么？ 要想知道，首先就要了解计算机是怎么工作的 &emsp;&emsp; 从白纸到图灵机计算机工作底层其实就是一个计算模型 图灵机-&gt;通用图灵机 将程序和数据存放到计算机内部的存储器中，这是冯诺依曼提出的重要思想！&emsp;&emsp; 从图灵机到计算机自冯诺依曼在**1946年**提出了存储程序的思想后，计算机进入了下一个阶段 他的思想里，计算机由5大部件组成：输入设备， 输出设备，存储器，运算器，控制器 这也是现在计算机的基石和原理，将程序和数据存入内存中，然后通过IP/PC指针进行取址执行 打开电源后，计算机执行的第一句指令是什么？ *PC=？ &emsp;&emsp; 操作系统总结 &emsp;&emsp; 操作系统的特征4个基本特征： *并发:两个或者多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。 常混淆的概念--并行：指两个或多个事件在同一时刻同时发生 *共享：资源共享，指系统中的资源可供内存中多个并发执行的进程共同使用 虚拟：把一个物理上的实体变为若干个逻辑上的对应物。物理实体是实际存在的，而逻辑上的对应物是用户感受到的 异步：再多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。 并发并发：操作系统中的并发性指计算机系统中同时存在着多个运行着的程序 操作系统和程序并发是一起诞生的 共享两种资源共享方式： 互斥共享方式：系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源 同时共享方式：系统中的某些资源，允许一个时间段内有多个进程“同时“对它们进行访问 所谓的“同时”往往是宏观上的，而在微观，这些进程可能是交替的对该资源进行访问的（即分时共享） 虚拟空分复用技术（如虚拟存储技术） 时分复用技术（如虚拟处理器技术） 背景知识：一个程序需要放入内存并给他分配CPU才能执行 异步只有系统拥有并发性，才有可能导致异步性 &emsp;&emsp; 操作系统的发展与分类&emsp;&emsp; 手工操作阶段 &emsp;&emsp; 批处理阶段——单道批处理系统为了解决[手工操作阶段]的问题,衍生出了批处理阶段，引入脱机输入/输出技术（用磁带完成） 并监督程序负责控制作业的输入、输出 &emsp;&emsp; 批处理阶段——多道批处理系统在这个阶段，操作系统正式诞生，并引入了中断技术，由操作系统负责管理这些程序的运行 各个程序并发执行 &emsp;&emsp; 多道批处理系统的优点：使系统资源利用率大幅提升 &emsp; 分时操作系统计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互 主要优点：解决了人机交互的问题（上一个层次遗留的问题），允许多个用户同时使用一台计算机， 并且用户对计算机的操作相互独立，感受不到别人的存在 主要缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环的为每个用户/作业服务一个时间片，不区分任务的紧急性 &emsp; &emsp;&emsp; 实时操作系统主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队 实时操作系统要在严格的时限内处理完事件 主要特点：及时性、可靠性 实时操作系统分为2大类： 1. 硬实时系统：必须在绝对严格的规定时间内完成处理 （Eg：导弹控制系统、自动驾驶系统） 2. 软实时系统：能接受偶尔违反时间规定 （Eg：12306火车订票系统） &emsp;&emsp; 其他几种操作系统&emsp;&emsp; &emsp;&emsp;&emsp; 知识回顾&emsp;&emsp; &emsp;&emsp;&emsp; 操作系统的运行机制和体系结构&emsp;&emsp; 预备知识：什么是指令？问题：“指令“和”代码“有什么区别 C语言代码-&gt;翻译-&gt;机器语言指令 （一条高级语言的代码翻译过后可能会对应多条指令） 简单来说，“指令”就是处理器（CPU）能识别、执行的最基本命令 比如：加法指令就是让CPU执行加法运算 新的问题： 有的指令“人畜无害” 比如加减乘除这些普通指令 但有的指令有很高的权限。比如：内存清零指令。如果用户程序可以使用这个指令，就意味着 一个用户可以将其他用户的内存数据随意清零，这样做显然是很危险的 于是！ 指令分为了2大类： 1. 特权指令：如内存清零指令 （不允许用户程序使用） 2. 非特权指令：如普通的运算指令 于是！ 又出现了新的问题：CPU如何判断当前是否可以执行特权指令？ 为此！ 规定了2种处理器状态： 1. 用户态（目态） 如果CPU处于用户态，此时CPU只能执行非特权指令 2. 核心态（管态） 如果处于核心态，可以执行2种状态 而这两种状态是由程序状态字寄存器（PSW）中的某标志位来标识当前处理器处于什么状态。 如：0为用户态，1为核心态 因为指令分为2大类 于是！ 程序也分成了2大类： 1. 内核程序 （操作系统的内核程序是系统的管理者，既可以执行特权指令，也可以执行非特权指令，运行在核心态） 2. 应用程序 （为了保证系统能安全运行，普通应用程序只能执行非特权指令，运行在用户态） 于是！ 就衍生出了新的问题：操作系统中的哪些功能应该由内核程序实现呢？ &emsp;","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"操作系统","slug":"操作系统","permalink":"https://sept0991.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"OS","slug":"OS","permalink":"https://sept0991.github.io/tags/OS/"}]},{"title":"JAVA","slug":"JAVA","date":"2022-01-13T04:49:43.000Z","updated":"2022-01-13T05:30:58.267Z","comments":true,"path":"2022/01/13/JAVA/","link":"","permalink":"https://sept0991.github.io/2022/01/13/JAVA/","excerpt":"","text":"JAVA文档注释 javadoc 用于文档和方法注释,格式为/** xxx */ 在文档注释中可用@author、@version…进行标注 JAVA的类型转换 java中 byte、short、char类型在运算是会自动转换成int类型 基本类型 -&gt; 字符串只要加“ ”就可 String类型 -&gt; 基本类型, 通过基本类型的包装类 Integer.parse() /Double.parse()… 算术运算符 模运算% 本质为a % b = a - a / b * b 10 % 3 = 1 -10 % 3 = -1 10 % -3 = 1 -10 % -3 = -1 自增运算符 ++ 当作为独立语句使用时,++a 等价于 a++ 自增运算符 ++ 作为表达式使用时 ++a先自增后赋值, a++先赋值后自增 如int k= ++j; -&gt; j=j+1; -&gt; k=j;","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"软件","slug":"软件","permalink":"https://sept0991.github.io/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"java","slug":"java","permalink":"https://sept0991.github.io/tags/java/"}]},{"title":"KaratsubaMutiplication","slug":"KaratsubaMutiplication","date":"2021-12-17T19:43:59.000Z","updated":"2021-12-17T19:51:14.390Z","comments":true,"path":"2021/12/18/KaratsubaMutiplication/","link":"","permalink":"https://sept0991.github.io/2021/12/18/KaratsubaMutiplication/","excerpt":"","text":"Karatsuba MutiplicationKaratsuba mutiplication 是一种优化的乘法算法. 可达到O(log3)的时间复杂度,理论上时间复杂度低于学校教的乘法","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"算法","slug":"算法","permalink":"https://sept0991.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"AlgorithmAnalysisRoadmap","slug":"AlgorithmAnalysisRoadmap","date":"2021-12-08T05:07:11.000Z","updated":"2021-12-08T05:20:07.284Z","comments":true,"path":"2021/12/08/AlgorithmAnalysisRoadmap/","link":"","permalink":"https://sept0991.github.io/2021/12/08/AlgorithmAnalysisRoadmap/","excerpt":"","text":"Weekly targets1. Week 1-2: Integer arithmetic, Master theorem, math proofs on complexity 2. Week 3: Linear time sorting and order statistics 3. Week 4-5: Trees, including AVL trees (heaps if time permits) 4. Week 6: Skip list and hashing 5. Week 7: Graphs BFS DFS 6. Week 8: Shortest path 7. Week 9: Minimum spanning tree 8. Week 10-12: Turing machine, halting problem, complexity class, NP-completeness, exam prep","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"算法","slug":"算法","permalink":"https://sept0991.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"CSTargets","slug":"CSTargets","date":"2021-12-08T04:24:36.000Z","updated":"2021-12-08T04:55:58.144Z","comments":true,"path":"2021/12/08/CSTargets/","link":"","permalink":"https://sept0991.github.io/2021/12/08/CSTargets/","excerpt":"","text":"Targets to complete in 4 weeks1. general questions on combinational logic 2. canonical representations derived from a truth table 3. selecting HDL statements required to implement a combinational logic circuit 4. number maximums for different representations and number of bits 5. number minimums for different representations and number of bits 6. number conversions for different representations and number of bits 7. arithmetic when values represented by different representations and number of bits 8. tracing the behaviour of the ALU for specific settings of zx, nx, zy, ny, f and no 9. ALU status output ng and zr for a specific ALU operation and input values 10. Bitwise operators 11. selecting HDL statements required to implement a sequential logic circuit 12. general questions on data flip flop behaviour 13. general questions on random access memory Targets to complete in 8 weeks1. All of the above 2. wiring of control signals in the HACK CPU 3. general questions about symbols in Hack Assembler 4. contents of the Hack Assembler&#39;s symbol table for short example programs 5. questions about what example Hack Assembler programs do 6. general questions about Virtual Machine commands, segments and memory layout 7. selecting assembler that implements specific Virtual Machine commands 8. selecting Virtual Machine commands to implement expressions 9. selecting Virtual Machine commands to implement assignment statements 10. selecting Virtual Machine commands to implement method and function calls 11. general questions about parsing tokens 12. Typewriters, text files and invisible differences 13. EBNF, languages and parsing Targets to complete in 12 weeks1. All of the above 2. general questions about Jack 3. general questions about syntax analysis and XML 4. the evaluation of Jack expressions 5. compiler tables required by a Jack Compiler 6. code generation by a Jack Compiler 7. Jack Operating System 8. general questions on signal propagation and power consumption 9. general questions on caching Reference Link","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"硬件","slug":"硬件","permalink":"https://sept0991.github.io/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"电路","slug":"电路","permalink":"https://sept0991.github.io/tags/%E7%94%B5%E8%B7%AF/"}]},{"title":"Nand2Tetris","slug":"Nand2Tetris-1","date":"2021-12-07T12:20:41.000Z","updated":"2021-12-08T05:01:26.825Z","comments":true,"path":"2021/12/07/Nand2Tetris-1/","link":"","permalink":"https://sept0991.github.io/2021/12/07/Nand2Tetris-1/","excerpt":"","text":"","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"硬件","slug":"硬件","permalink":"https://sept0991.github.io/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"电路","slug":"电路","permalink":"https://sept0991.github.io/tags/%E7%94%B5%E8%B7%AF/"}]},{"title":"数据结构与算法","slug":"数据结构与算法","date":"2021-12-07T12:19:23.000Z","updated":"2021-12-08T05:11:25.480Z","comments":true,"path":"2021/12/07/数据结构与算法/","link":"","permalink":"https://sept0991.github.io/2021/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"算法","slug":"算法","permalink":"https://sept0991.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"计算机网络","slug":"计算机网络","date":"2021-12-07T12:19:15.000Z","updated":"2021-12-07T12:19:15.849Z","comments":true,"path":"2021/12/07/计算机网络/","link":"","permalink":"https://sept0991.github.io/2021/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"数字电路","slug":"数字电路","date":"2021-12-07T12:16:25.000Z","updated":"2021-12-08T04:56:07.374Z","comments":true,"path":"2021/12/07/数字电路/","link":"","permalink":"https://sept0991.github.io/2021/12/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/","excerpt":"","text":"1.0 逻辑代数定义: 数字电路分析和设计使用的数学工具 在逻辑代数中 有 与(AND) 或(OR) 非(NOT) 3种 基本逻辑运算 主要学的就是真值表 1.1 与运算逻辑关系:只有当决定一事件结果的所有条件同时具备时,结果才能发生 真值表: 逻辑表达式:F=A·B 实现“与”逻辑的单元电路称为 A|B|F “与门” 0 0 0 0 1 0 1 0 0 1 1 1 1.2 或运算逻辑关系:当满足一个条件,结果就能发生 真值表: 逻辑表达式:F=A+B A|B|F 0 0 0 1 0 1 0 1 1 1 1 1 1.3 非运算逻辑关系:逻辑的否定,当条件具备时,结果不会发生,而条件不具备时,结果一定会发生 真值表: 逻辑表达式 F=A‘ A|F 0 1 1 0 波形 (这是一个新概念)注意:1. 输入波形要穷举所有可能的输入组合(n个输入变量有2^n种可能) 2.输出波形与输入变化对应 1.4 基本定律1. 0-1律: A·0=0 A+1=1 2. 自等律: A·1=A A+0=A 3. 重叠律: A·A=A A+A=A 4. 互补律: A·A‘=0 A+A’=1 5. 交换律: A·B=B·A A+B=B+A 6. 结合律: (A·B)·C=A·(B·C) (A+B)+C=A+(B+C) 7. 分配律: A·(B+C)=AB+AC (*此律普通代数运算没有)A+BC=(A+B)(A+C) 8. 反演律(迪摩根定律;De Morgan): (A·B)’=A‘+B’ (A+B)‘=A’·B‘ 9. 还原率:A’‘=A 1.5 三个重要规则1. 代入规则:任何一个逻辑等式,如果将等式两边所出现的某一变量都代之以同一逻辑函数,则等式依然成立,这个规则称为代入规则 2. 反演规则:对于任意一个逻辑函数式F,如果将其代表式中所有的算符“·”换成“+”,“+”换成“·”,常量“0”换成“1”,“1”换成“0”;原变量换成反变量,反变量换成原变量,则所得到的结果就是F‘,F’称为原函数F的反函数,或称为补函数","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"硬件","slug":"硬件","permalink":"https://sept0991.github.io/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"电路","slug":"电路","permalink":"https://sept0991.github.io/tags/%E7%94%B5%E8%B7%AF/"}]},{"title":"My Blog","slug":"My-Blog","date":"2021-12-07T07:26:48.000Z","updated":"2021-12-07T12:10:49.629Z","comments":true,"path":"2021/12/07/My-Blog/","link":"","permalink":"https://sept0991.github.io/2021/12/07/My-Blog/","excerpt":"","text":"The Milestone","categories":[],"tags":[{"name":"闲谈","slug":"闲谈","permalink":"https://sept0991.github.io/tags/%E9%97%B2%E8%B0%88/"}]}],"categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"https://sept0991.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"操作系统","slug":"操作系统","permalink":"https://sept0991.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"OS","slug":"OS","permalink":"https://sept0991.github.io/tags/OS/"},{"name":"软件","slug":"软件","permalink":"https://sept0991.github.io/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"java","slug":"java","permalink":"https://sept0991.github.io/tags/java/"},{"name":"算法","slug":"算法","permalink":"https://sept0991.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"硬件","slug":"硬件","permalink":"https://sept0991.github.io/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"电路","slug":"电路","permalink":"https://sept0991.github.io/tags/%E7%94%B5%E8%B7%AF/"},{"name":"闲谈","slug":"闲谈","permalink":"https://sept0991.github.io/tags/%E9%97%B2%E8%B0%88/"}]}